/*
A granular delay. 

Best Cmajor practices are not mostly followed yet, the code started pretty
much as a port of some C++ code I did recently.

Issues :
- Resampling could be done with a better algorithm instead of the linear interpolation
- The grain envelope shapes could be more imaginative
- No custom GUI

-Xenakios, September 2024
*/

graph graindelay  [[ main ]]
{
    input stream float<2> audio_in;
    output stream float<2> audio_out;
    
    input value float freezeInput [[ name: "Freeze input", text: "Off|On", boolean ]];
    input value float density [[ name: "Density", min: -1.0f, max: 1.0f, init: -0.5f ]];
    input value float size [[ name: "Size", min: -1.0f, max: 1.0f, init: 0.6f ]];
    input value float sizerand [[ name: "Size rnd", min: -1.0f, max: 1.0f, init: 0.0f ]];
    input value float shape [[ name: "Shape", min: 0.0f, max: 1.0f, init: 1.0f ]];
    input value float position [[ name: "Time", min: 0.0f, max: 1.0f, init: 0.1f ]];
    input value float positionrand [[ name: "Time rnd", min: -1.0f, max: 1.0f, init: 0.1f ]];
    input value float pitch [[ name: "Pitch", min: -12.0f, max: 12.0f, init: 0.0f ]];
    input value float pitchrand [[ name: "Pitch rnd", min: -1.0f, max: 1.0f, init: 0.0f ]];
    input value float chance [[ name: "Probability", min: 0.0f, max: 1.0f, init: 1.0f ]];
    input event float panmode [[ name: "Pan", text: "Center|Alt L/R|Dual sine|Random uniform|Random Cauchy",init:1.0f ]];
    input value float mainvol [[ name: "Output gain", min: 0.0f, max: 1.0f, init: 0.5f, rampFrames: 2048 ]];
    input value float limitmode [[ name: "Limit", text: "Clip|Saturate mild|Saturate hard",init:1.0f ]];
    input value float drywet [[ name: "Mix", min: 0.0f, max: 1.0f, init: 1.0f, rampFrames: 2048 ]];
    node engine = GrainDelayEngine;
    connection
    {
        audio_in -> engine.audio_in;
        density -> engine.grainrate;
        position -> engine.grainposition;
        size -> engine.grainsize;
        sizerand -> engine.grainsizerand;
        pitch -> engine.grainpitch;
        freezeInput -> engine.inputFrozen;
        chance -> engine.grainChance;
        mainvol -> engine.mainvol;
        limitmode -> engine.limitmode;
        shape -> engine.grainshape;
        drywet -> engine.drywet;
        panmode -> engine.panmode;
        positionrand -> engine.positionrand;
        
        pitchrand -> engine.pitchrand;
        engine.audio_out -> audio_out;
    }
}

processor GrainDelayEngine
{
    input stream float<2> audio_in;
    input stream float grainposition;
    input stream float grainrate;
    input stream float grainsize;
    input stream float grainsizerand;
    input stream float grainpitch;
    input stream float grainshape;
    input stream float inputFrozen;
    input stream float grainChance;
    input stream float mainvol;
    input stream float limitmode;
    input stream float drywet;
    input event float panmode;
    input stream float positionrand;
    input stream float pitchrand;
    
    output stream float<2> audio_out;
    
    let maxDelayLength = 10 * 44100;
    float<2>[maxDelayLength] delayBuffer;
    wrap<maxDelayLength> writeIndex;
    // pan mode doesn't really need to be an event since we don't need to calculate
    // anything expensive in the callback, but was used to check out how the events work
    int panmodeValue;
    event panmode (float m)
    {
        panmodeValue = int(m);
    }
    struct PlayHead
    {
        bool isActive;
        float64 sourceReadPos;
        int lenSamples;
        int outPlaypos;
        float playRate;
        int fadelensamples;
        float<2> pangains;
        float envShape;
    }
    let numPlayheads = 32;
    PlayHead[numPlayheads] playheads;
    std::random::RNG rng;
    float envelopeValue(float pos, float param)
    {
        float peakpos = xen::remap(param, 0.0f, 1.0f, 0.01f, 0.99f);
        float out;
        if (pos < peakpos)
            out = xen::remap(pos, 0.0f, peakpos, 0.0f, 1.0f);
        else out = xen::remap(pos, peakpos, 1.0f, 1.0f, 0.0f);
        return pow(out,2.0f);
    }
    void initPlayhead(PlayHead& ph, int64 graincounter, int64 playbackPos)
    {
        ph.isActive = true;
        ph.outPlaypos = 0;
        float modulatedSize = grainsize + xen::getBipolarRandom(grainsizerand, rng);
        modulatedSize = clamp(modulatedSize, -1.0f, 1.0f);
        float sz = pow(abs(modulatedSize), 2.0f);
        sz = xen::remap(sz, 0.0f, 1.0f, 0.01f, 1.0f);
        ph.lenSamples = int(processor.frequency * sz);
        float randomPos = grainposition + xen::getBipolarRandom(positionrand,rng) * 0.5f;
        randomPos = clamp(randomPos, 0.0f, 1.0f);
        let mindelay = int(processor.frequency * 0.05);
        let maxdelay = int(processor.frequency * 4.0);
        let delaytime = int(mindelay + randomPos * (maxdelay - mindelay));
        int offset = 0;
        if (modulatedSize < 0.0) // if reversed, start from the source material end
            offset = ph.lenSamples - 1;
        ph.sourceReadPos = float64(wrap<maxDelayLength>(writeIndex - delaytime + offset));
        float pitch = grainpitch + xen::getBipolarRandom(pitchrand,rng)*12.0f;
        // allow the modulations to go a bit past the normal range of the pitch :-)
        pitch = clamp(pitch, -18.0f, 18.0f);
        let playrate = pow(2.0f, pitch / 12.0f);
        ph.playRate = playrate;
        if (modulatedSize < 0.0)
            ph.playRate = -playrate;
        int fadelen = int(ph.lenSamples / 2 * grainshape);
        fadelen = clamp(fadelen,32,ph.lenSamples/2);
        ph.fadelensamples = fadelen;
        ph.envShape = grainshape;
        float panpos = 0.0f;
        if (panmodeValue == 1)
            panpos = -1.0f + 2.0f * (graincounter % 2);
        if (panmodeValue == 2)
        {
            if (graincounter % 2 == 0)
                panpos = float(0.97 * sin(twoPi/processor.frequency*playbackPos*0.5f*1.0));            
            if (graincounter % 2 == 1)
                panpos = float(0.97 * sin(twoPi/processor.frequency*playbackPos*0.5f*1.13));
        }
        if (panmodeValue == 3)
            panpos = -1.0f+2.0f*rng.getUnipolar();
        if (panmodeValue == 4)
            panpos = xen::getBipolarRandom(-0.5f,rng);
        ph.pangains = std::pan_law::centre3dB(panpos);
        
    }
    void main()
    {
        writeIndex = maxDelayLength - 1;
        float64 grainPhasor = 0.0f;
        float64 rate = 0.0;
        int64 graincounter = 0;
        int64 playbackPos = 0;
        int numActivePlayheads = 0;
        loop
        {
            float<2> dry_in = audio_in;
            if (inputFrozen < 0.5f)
            {
                delayBuffer[writeIndex] = (audio_in[0],audio_in[1]);
                writeIndex++;
            }
            
            if (grainPhasor == 0.0)
            {
                let maxDensityOctave = 8.0;
                if (grainrate > 0.0)
                {
                    // calculate the next random grain time as seconds for clarity
                    float64 secondsavg = 1.0 / pow(2.0, grainrate * maxDensityOctave);
                    // Might be nice to have some of these random distributions in the 
                    // Cmajor standard lib, like exponential, Gauss, Cauchy...
                    float64 seconds = -log(rng.getUnipolar()) * secondsavg; // exponential distribution
                    seconds = clamp(seconds, 0.001, 1.0);
                    // then go back to Hz rate
                    rate = 1.0/seconds;
                } else if (grainrate<0.0)
                {
                    rate = pow(2.0, abs(grainrate) * maxDensityOctave);
                } else
                {
                    rate = 0.0;
                }
                if (rate > 0.0 && rng.getUnipolar() < grainChance)
                {
                    for (wrap<numPlayheads> i)
                    {
                        if (!playheads[i].isActive)
                        {
                            initPlayhead(playheads[i],graincounter,playbackPos);
                            graincounter++;
                            numActivePlayheads++;
                            break;
                        }
                    }
                }
                   
            }
            grainPhasor += 1.0 / processor.frequency * rate;
            if (grainPhasor >= 1.0)
            {
                // this isn't the best way to do this but it's easier to detect the phasor resetted
                // this way
                grainPhasor = 0.0;
            }
            playbackPos++;
            float outLeft = 0.0f;
            float outRight = 0.0f;
            for (wrap<numPlayheads> i)
            {
                if (rate>0.0 && playheads[i].isActive)
                {
                    // float64 gain = 1.0;
                    //int fadelen = playheads[i].fadelensamples;
                    //int fadeoutstart = playheads[i].lenSamples - fadelen;
                    int phoutpos = playheads[i].outPlaypos;
                    float normposingrain = xen::remap(float(phoutpos),0.0f,float(playheads[i].lenSamples),0.0f,1.0f);
                    float gain = envelopeValue(normposingrain,playheads[i].envShape);
                    /*
                    if (phoutpos < fadelen)
                        gain = 1.0/fadelen*phoutpos;
                    if (phoutpos >= fadeoutstart)
                        gain = 1.0 - (1.0 / (fadelen-1) * (phoutpos-fadeoutstart));
                    */
                    let sourceReadIndex0 = wrap<maxDelayLength>(floor(playheads[i].sourceReadPos));
                    let sourceReadIndex1 = wrap<maxDelayLength>(sourceReadIndex0 + 1);
                    let frac = playheads[i].sourceReadPos - int(playheads[i].sourceReadPos);
                    let vy0 = delayBuffer[sourceReadIndex0];
                    let vy1 = delayBuffer[sourceReadIndex1];
                    let vinterp = vy0 + (vy1 - vy0) * frac;
                    let pangains = playheads[i].pangains;
                    outLeft += gain * float(vinterp[0]) * pangains[0];
                    outRight += gain * float(vinterp[1]) * pangains[1];
                    
                    playheads[i].sourceReadPos += playheads[i].playRate;
                    playheads[i].outPlaypos++;
                    if (playheads[i].outPlaypos == playheads[i].lenSamples)
                    {
                        playheads[i].isActive = false;
                        numActivePlayheads--;
                    }
                }
                
                
            }
            let tempnumplayheads = clamp(numActivePlayheads,0,numPlayheads);
            // not really based on anything, just attenuate the mix level some when more
            // playheads are playing simultaneously
            float gainCompens = 1.0f - tempnumplayheads * 0.025f;
            // the tanh shaping is pretty rough, should make optional/adjustable
            float<2> wet;
            if (int(limitmode) == 1)
                wet = (mainvol * tanh(outLeft * gainCompens),mainvol * tanh(outRight * gainCompens));
            // else wet = (mainvol * clamp(outLeft * gainCompens,-1.0f,1.0f),mainvol * tanh(outRight * gainCompens));
            // (mainvol * tanh(outLeft * 0.5f),mainvol*tanh(outRight * 0.5f))
            audio_out <- drywet * wet + (1.0f-drywet) * dry_in;
            advance();
        }
        
    }
}
